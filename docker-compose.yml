services:
  # 主应用服务
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sys-rev-tec-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-sys_rev_password}@db:5432/${POSTGRES_DB:-sys_rev_tech}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./static:/app/static
      - ./backups:/app/backups
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sys-rev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL 数据库 (支持 pgvector 扩展)
  db:
    image: pgvector/pgvector:pg15
    container_name: sys-rev-tec-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-sys_rev_tech}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-sys_rev_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./docker/postgres/init-vector.sql:/docker-entrypoint-initdb.d/02-init-vector.sql:ro
    ports:
      - "5432:5432"
    networks:
      - sys-rev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-sys_rev_tech}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: sys-rev-tec-redis
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - sys-rev-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # OCR 处理服务 (可选的独立OCR服务)
  ocr-service:
    build:
      context: .
      dockerfile: docker/ocr/Dockerfile
    container_name: sys-rev-tec-ocr
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - OCR_QUEUE_NAME=ocr_tasks
    volumes:
      - ./uploads:/app/uploads:ro
      - ./temp:/app/temp
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - sys-rev-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # AI 向量化和搜索服务
  ai-service:
    build:
      context: .
      dockerfile: docker/ai/Dockerfile
    container_name: sys-rev-tec-ai
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-sys_rev_password}@db:5432/${POSTGRES_DB:-sys_rev_tech}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://host.docker.internal:11434}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT:-}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY:-}
      - VECTOR_DIMENSION=1024
      - AI_QUEUE_NAME=ai_tasks
    volumes:
      - ./uploads:/app/uploads:ro
      - ./temp:/app/temp
      - ./models:/app/models
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sys-rev-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: sys-rev-tec-nginx
    restart: unless-stopped
    ports:
      - "11080:80"
      - "11443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./frontend:/var/www/html:ro
      - ./static:/var/www/static:ro
      - ./uploads:/var/www/uploads:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - sys-rev-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prometheus 监控 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: sys-rev-tec-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sys-rev-network
    profiles:
      - monitoring

  # Grafana 可视化 (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: sys-rev-tec-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - sys-rev-network
    profiles:
      - monitoring

# 网络配置
networks:
  sys-rev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

# 数据卷
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local